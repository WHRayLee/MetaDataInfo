// Code generated by goyacc -l -o parser.go Parser.y. DO NOT EDIT.
package yacc

import __yyfmt__ "fmt"

import "Lexer/model"

func setResult(l yyLexer, v model.ParseResult) {
	l.(*Lexer).result = v
}

type yySymType struct {
	yys              int
	str              string
	strs             []string
	tpParseResult    model.ParseResult
	tpTableBasicInfo model.TableBasicInfo
	tpColumnList     []model.ColumnInfo
	tpJoinList       []model.JoinInfo
	tpConditionList  []model.ConditionInfo
	tpConditionInfo  model.ConditionInfo
	tpJoinInfo       model.JoinInfo
	tpColumnInfo     model.ColumnInfo
}

const Identifier = 57346
const AS = 57347
const INSERT = 57348
const INTO = 57349
const FROM = 57350
const SELECT = 57351
const LEFT = 57352
const OUTER = 57353
const JOIN = 57354
const RIGHT = 57355
const INNER = 57356
const CROSS = 57357
const NATURAL = 57358
const ON = 57359
const AND = 57360
const eq = 57361
const WHERE = 57362
const GROUP = 57363
const BY = 57364
const SUM = 57365
const AVG = 57366
const COUNT = 57367
const MAX = 57368
const MIN = 57369
const ASTERISK = 57370

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"Identifier",
	"AS",
	"INSERT",
	"INTO",
	"FROM",
	"SELECT",
	"LEFT",
	"OUTER",
	"JOIN",
	"RIGHT",
	"INNER",
	"CROSS",
	"NATURAL",
	"ON",
	"AND",
	"eq",
	"WHERE",
	"GROUP",
	"BY",
	"SUM",
	"AVG",
	"COUNT",
	"MAX",
	"MIN",
	"ASTERISK",
	"'('",
	"')'",
	"'.'",
	"','",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 127

var yyAct = [...]int{
	29, 97, 95, 69, 68, 12, 18, 19, 30, 31,
	30, 31, 30, 31, 26, 103, 27, 33, 77, 76,
	42, 40, 19, 41, 102, 101, 21, 22, 24, 23,
	25, 17, 78, 89, 61, 63, 44, 43, 6, 28,
	51, 21, 22, 24, 23, 25, 81, 64, 59, 35,
	49, 105, 36, 37, 38, 39, 66, 90, 62, 50,
	35, 75, 99, 36, 37, 38, 39, 83, 87, 88,
	71, 74, 82, 73, 84, 54, 55, 58, 91, 92,
	93, 52, 53, 57, 70, 56, 9, 15, 7, 4,
	100, 30, 31, 98, 96, 71, 79, 60, 13, 47,
	46, 104, 106, 107, 45, 11, 108, 109, 20, 1,
	85, 67, 72, 48, 32, 14, 3, 2, 94, 16,
	80, 65, 8, 10, 5, 86, 34,
}

var yyPact = [...]int{
	83, -1000, -1000, 9, 81, 77, 101, 94, 79, 3,
	-16, -1000, -1000, 8, 50, 94, -9, -1000, -1000, 6,
	7, -1000, -1000, -1000, -1000, -1000, -1000, 100, 96, -1000,
	-1000, 95, 39, -1000, 94, 70, 64, 73, 71, 65,
	-1000, 18, -1000, 93, 30, -1000, 4, -1000, 35, -1000,
	66, -1000, 61, -1000, 59, -1000, -1000, -1000, -1000, -1000,
	87, -12, 2, 92, -1000, -1000, 24, 66, -1000, 48,
	91, -1000, 51, -1000, -1000, -1000, 29, 87, 87, 87,
	-1000, 90, -1000, 89, 43, -1000, 91, -1000, -1000, -5,
	-6, -1000, -1000, -1000, -17, -1000, -1000, -1000, -1000, 89,
	32, 87, 87, 90, -1000, 89, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 0, 126, 3, 1, 125, 124, 123, 122, 121,
	120, 119, 118, 117, 116, 5, 115, 114, 113, 112,
	111, 110, 4, 2, 6, 17, 109, 108,
}

var yyR1 = [...]int{
	0, 26, 13, 14, 14, 16, 16, 15, 15, 15,
	1, 1, 1, 6, 6, 7, 7, 8, 8, 11,
	11, 11, 11, 24, 24, 24, 24, 24, 24, 27,
	27, 27, 27, 27, 17, 17, 25, 2, 2, 2,
	2, 2, 2, 2, 19, 19, 21, 5, 5, 3,
	4, 18, 18, 20, 20, 22, 22, 9, 9, 12,
	12, 23, 10,
}

var yyR2 = [...]int{
	0, 1, 8, 0, 3, 2, 0, 6, 4, 2,
	0, 1, 2, 0, 3, 1, 3, 0, 2, 0,
	1, 1, 3, 2, 4, 7, 7, 5, 5, 1,
	1, 1, 1, 1, 2, 1, 3, 3, 2, 3,
	2, 2, 2, 2, 0, 2, 4, 1, 1, 1,
	1, 0, 2, 1, 2, 3, 4, 0, 3, 3,
	1, 1, 0,
}

var yyChk = [...]int{
	-1000, -26, -13, -14, 6, -6, 29, 7, -8, 9,
	-7, 4, -15, 4, -16, 8, -11, 28, -24, 4,
	-27, 23, 24, 26, 25, 27, 30, 32, 31, -1,
	4, 5, -17, -25, -2, 10, 13, 14, 15, 16,
	-15, 32, -1, 31, 29, 4, 4, 4, -18, -25,
	20, -15, 11, 12, 11, 12, 12, 12, 12, -24,
	4, 4, 28, 31, -1, -9, 21, -20, -22, -3,
	18, 4, -19, 12, 12, -1, 31, 30, 30, 4,
	-10, 22, -22, 19, -3, -21, -5, 17, 18, 4,
	28, -1, -1, -1, -12, -23, 4, -4, 4, 19,
	-3, 30, 30, 32, -4, 19, -1, -1, -23, -4,
}

var yyDef = [...]int{
	3, -2, 1, 13, 0, 17, 0, 0, 6, 19,
	0, 15, 4, 10, 0, 0, 18, 20, 21, 10,
	0, 29, 30, 31, 32, 33, 14, 0, 0, 9,
	11, 0, 51, 35, 0, 0, 0, 0, 0, 0,
	5, 0, 23, 0, 0, 16, 10, 12, 57, 34,
	0, 44, 0, 38, 0, 40, 41, 42, 43, 22,
	10, 0, 0, 0, 8, 62, 0, 52, 53, 0,
	0, 49, 36, 37, 39, 24, 0, 10, 10, 10,
	2, 0, 54, 0, 0, 45, 0, 47, 48, 0,
	0, 27, 28, 7, 58, 60, 61, 55, 50, 0,
	0, 10, 10, 0, 56, 0, 25, 26, 59, 46,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	29, 30, 3, 3, 32, 3, 31,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			setResult(yylex, yyDollar[1].tpParseResult)
		}
	case 2:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			parseResult := model.NewParseResult()
			parseResult.SetInsertTableInfo(yyDollar[1].tpTableBasicInfo)
			parseResult.SetInsertColumnList(yyDollar[2].tpColumnList)
			parseResult.SetSelectTableInfo(yyDollar[4].tpTableBasicInfo)
			parseResult.SetSelectColumnList(yyDollar[3].tpColumnList)
			parseResult.SetJoinList(yyDollar[5].tpJoinList)
			parseResult.SetWhereConditionList(yyDollar[6].tpConditionList)
			parseResult.SetGroupByList(yyDollar[7].tpColumnList)
			parseResult.SetOrderByList(yyDollar[8].tpColumnList)
			yyVAL.tpParseResult = *parseResult
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			tableBasicInfo := model.NewTableBasicInfo()
			yyVAL.tpTableBasicInfo = *tableBasicInfo
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tpTableBasicInfo = yyDollar[3].tpTableBasicInfo
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tpTableBasicInfo = yyDollar[2].tpTableBasicInfo
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			tableBasicInfo := model.NewTableBasicInfo()
			yyVAL.tpTableBasicInfo = *tableBasicInfo
		}
	case 7:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			tableBasicInfo := model.NewTableBasicInfo()
			tableBasicInfo.SetDBName(yyDollar[1].str)
			tableBasicInfo.SetSchemaName(yyDollar[3].str)
			tableBasicInfo.SetTableName(yyDollar[5].str)
			tableBasicInfo.SetTableShortName(yyDollar[6].str)
			yyVAL.tpTableBasicInfo = *tableBasicInfo
		}
	case 8:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			tableBasicInfo := model.NewTableBasicInfo()
			tableBasicInfo.SetSchemaName(yyDollar[1].str)
			tableBasicInfo.SetTableName(yyDollar[3].str)
			tableBasicInfo.SetTableShortName(yyDollar[4].str)
			yyVAL.tpTableBasicInfo = *tableBasicInfo
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			tableBasicInfo := model.NewTableBasicInfo()
			tableBasicInfo.SetTableName(yyDollar[1].str)
			tableBasicInfo.SetTableShortName(yyDollar[2].str)
			yyVAL.tpTableBasicInfo = *tableBasicInfo
		}
	case 10:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			columnInfo := model.NewColumnInfo()
			columnInfo.SetColumnName("*")
			yyVAL.tpColumnList = []model.ColumnInfo{*columnInfo}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tpColumnList = yyDollar[2].tpColumnList
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			columnInfo := model.NewColumnInfo()
			columnInfo.SetColumnName(yyDollar[1].str)
			yyVAL.tpColumnList = []model.ColumnInfo{*columnInfo}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			columnInfo := model.NewColumnInfo()
			columnInfo.SetColumnName(yyDollar[3].str)
			yyVAL.tpColumnList = append(yyDollar[1].tpColumnList, *columnInfo)
		}
	case 17:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			columnInfo := model.NewColumnInfo()
			yyVAL.tpColumnList = []model.ColumnInfo{*columnInfo}
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tpColumnList = yyDollar[2].tpColumnList
		}
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			columnInfo := model.NewColumnInfo()
			yyVAL.tpColumnList = []model.ColumnInfo{*columnInfo}
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			columnInfo := model.NewColumnInfo()
			columnInfo.SetColumnName("*")
			yyVAL.tpColumnList = []model.ColumnInfo{*columnInfo}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tpColumnList = []model.ColumnInfo{yyDollar[1].tpColumnInfo}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tpColumnList = append(yyDollar[1].tpColumnList, yyDollar[3].tpColumnInfo)
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			columnInfo := model.NewColumnInfo()
			columnInfo.SetColumnName(yyDollar[1].str)
			columnInfo.SetColumnAliasName(yyDollar[2].str)
			yyVAL.tpColumnInfo = *columnInfo
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			columnInfo := model.NewColumnInfo()
			columnInfo.SetShortTableName(yyDollar[1].str)
			columnInfo.SetColumnName(yyDollar[3].str)
			columnInfo.SetColumnAliasName(yyDollar[4].str)
			yyVAL.tpColumnInfo = *columnInfo
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			columnInfo := model.NewColumnInfo()
			columnInfo.SetShortTableName(yyDollar[3].str)
			columnInfo.SetColumnName(yyDollar[5].str)
			columnInfo.SetColumnAliasName(yyDollar[7].str)
			yyVAL.tpColumnInfo = *columnInfo
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			columnInfo := model.NewColumnInfo()
			columnInfo.SetShortTableName(yyDollar[3].str)
			columnInfo.SetColumnName(yyDollar[5].str)
			columnInfo.SetColumnAliasName(yyDollar[7].str)
			yyVAL.tpColumnInfo = *columnInfo
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			columnInfo := model.NewColumnInfo()
			columnInfo.SetColumnName(yyDollar[3].str)
			columnInfo.SetColumnAliasName(yyDollar[5].str)
			yyVAL.tpColumnInfo = *columnInfo
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			columnInfo := model.NewColumnInfo()
			columnInfo.SetColumnName(yyDollar[3].str)
			columnInfo.SetColumnAliasName(yyDollar[5].str)
			yyVAL.tpColumnInfo = *columnInfo
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tpJoinList = append(yyDollar[1].tpJoinList, yyDollar[2].tpJoinInfo)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tpJoinList = []model.JoinInfo{yyDollar[1].tpJoinInfo}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			joinInfo := model.NewJoinInfo()
			joinInfo.SetJoinType(yyDollar[1].str)
			tableBasicInfo := model.NewTableBasicInfo()
			tableBasicInfo = &yyDollar[2].tpTableBasicInfo
			joinInfo.SetJoinTableInfo(*tableBasicInfo)
			joinInfo.SetJoinConditionList(yyDollar[3].tpConditionList)
			yyVAL.tpJoinInfo = *joinInfo
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = "LeftOuterJoin"
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = "LeftJoin"
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = "RightOuterJoin"
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = "RightJoin"
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = "InnerJoin"
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = "CrossJoin"
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = "NaturalJoin"
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			conditionInfo := model.NewConditionInfo()
			conditionInfo.SetLeftColumnInfo("1")
			conditionInfo.SetRightColumnInfo("1")
			conditionInfo.SetSign("=")
			yyVAL.tpConditionList = []model.ConditionInfo{*conditionInfo}
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tpConditionList = append(yyDollar[1].tpConditionList, yyDollar[2].tpConditionInfo)
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			conditionInfo := model.NewConditionInfo()
			conditionInfo.SetLeftColumnInfo(yyDollar[2].str)
			conditionInfo.SetRightColumnInfo(yyDollar[4].str)
			conditionInfo.SetSign("=")
			yyVAL.tpConditionInfo = *conditionInfo
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			conditionInfo := model.NewConditionInfo()
			conditionInfo.SetLeftColumnInfo("1")
			conditionInfo.SetRightColumnInfo("1")
			conditionInfo.SetSign("=")
			yyVAL.tpConditionList = []model.ConditionInfo{*conditionInfo}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tpConditionList = yyDollar[2].tpConditionList
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tpConditionList = []model.ConditionInfo{yyDollar[1].tpConditionInfo}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tpConditionList = append(yyDollar[1].tpConditionList, yyDollar[2].tpConditionInfo)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			conditionInfo := model.NewConditionInfo()
			conditionInfo.SetLeftColumnInfo(yyDollar[1].str)
			conditionInfo.SetRightColumnInfo(yyDollar[3].str)
			conditionInfo.SetSign("=")
			yyVAL.tpConditionInfo = *conditionInfo
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			conditionInfo := model.NewConditionInfo()
			conditionInfo.SetLeftColumnInfo(yyDollar[2].str)
			conditionInfo.SetRightColumnInfo(yyDollar[4].str)
			conditionInfo.SetSign("=")
			yyVAL.tpConditionInfo = *conditionInfo
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			columnInfo := model.NewColumnInfo()
			yyVAL.tpColumnList = []model.ColumnInfo{*columnInfo}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tpColumnList = yyDollar[3].tpColumnList
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tpColumnList = append(yyDollar[1].tpColumnList, yyDollar[3].tpColumnInfo)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tpColumnList = []model.ColumnInfo{yyDollar[1].tpColumnInfo}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			columnInfo := model.NewColumnInfo()
			columnInfo.SetColumnName(yyDollar[1].str)
			yyVAL.tpColumnInfo = *columnInfo
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			columnInfo := model.NewColumnInfo()
			yyVAL.tpColumnList = []model.ColumnInfo{*columnInfo}
		}
	}
	goto yystack /* stack new state and value */
}
